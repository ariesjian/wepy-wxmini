
<template>
	<!-- <view class="AlertView" catchtouchmove="{{false}}" :class="{AlertShow:!!visible}"> -->
  <view class="AlertView {{visible ? 'AlertShow' : 'AlertHide'}}">
     <!-- @tap.stop="closeAlert" -->
		<view class="AlertMask" @tap.stop="hideAlert"></view>
		<view class="AlertCont" style="min-width:{{contW}};min-height:{{contH}}">
      <block wx:if="{{!!ShowCloseBtn}}">
        <image class="CloseIcon" src="../images/components/closeAlert.png"  @tap.stop="closeAlert"/>
      </block>
      <view wx:if="{{!!tip}}" class="alert-text">{{tip}}</view>
      <slot name="cont" wx:else>{{tip}}</slot>
		</view>
	</view>
</template>

<script>
import wepy from 'wepy';

export default class Alert extends wepy.component {

	data = {
		visible: false,
		tip:''
	};
	props={
		contW:{
			type:String,
      default:'496rpx',
      // default:'auto',
		},
		contH:{
			type:String,
      default:'200rpx',
      // default:'auto',
		},
		ShowCloseBtn:{
			type:Boolean,
			default:true
		},
    hideStatus:{
      type:Boolean,
      default:true
    }
	}
	methods = {
    hideAlert(){
      if(!this.hideStatus){
        this.visible = false
        this.$apply();
      }
    },
		closeAlert(){
			console.log(1)
			this.visible = false
      this.$apply();
		}
	}
	computed = {

	};
	watch = {

	}
	show(text,autoCloseType) {
		// if (!text) {
		// 	return;
		// }

		this.hide();

		setTimeout(() => {
			this.visible = true;
		console.log(text,'text')
			this.tip = text;
			this.$apply();
		}, 20);

		if (this.timer) {
			clearTimeout(this.timer);
			this.timer = null;
		}
		// console.log(autoCloseType,'autoCloseType')
		if(!autoCloseType) return ;
		this.timer = setTimeout(() => this.hide(), 2000);
	}

	hide() {
		this.visible = false;
		this.tip = '';
		this.$apply();
  }
  onLoad(){
    // console.log(this.props,'Alert中的this.props')
  }
}
</script>

<style lang="less">
.AlertView{
	// display: none;
	// pointer-events: none;
	height:100%;
	width: 100%;
	position: fixed;
	top:50%;
  left:50%;
  margin: auto;
  transform: translateX(-50%) translateY(-50%);
  // z-index: 999;
  z-index: -1;
  // animation: swpy-tipbox-fx 2s ease-in-out;
	.AlertMask{
		position: absolute;
		opacity: 0;
		top:0;
		left:0;
		z-index: 1000;
		background: #1B1F2E;
		height:100%;
		width: 100%;
	}
	.AlertCont{
		position: absolute;
    left: 50%;
    top: 50%;
		margin: auto;
    word-break: break-all;
    transition: all .3s cubic-bezier(0, 1.19, 0.64, 1.04);
    transform: translateX(-50%) translateY(-50%) scale(0);
		min-height: 200rpx;
    z-index: 1001;
    opacity: 0;
		background-color: transparent;
		border-radius: 6rpx;
		display: flex;
		justify-content: center;
    align-items: center;
		.alert-text{
			width:540rpx;
			height:140rpx;
			font-size:32rpx;
			font-weight:400;
			color:rgba(124,119,154,1);
      line-height:1.5;
      padding: 15rpx;
		}
		.CloseIcon{
			width: 47rpx;
			height: 47rpx;
			position: absolute;
			z-index: 1001;
			right: 25rpx;
			top: 25rpx;
		}
	}
	&.AlertShow{
    // display: block;
    z-index: 999;
    .AlertMask{
      opacity: 0.4;
    }
    .AlertCont{
      transform: translateX(-50%) translateY(-50%) scale(1);
      opacity: 1;
    }
  }
  &.AlertHide{
    z-index: -1;
    .AlertMask{
      opacity: 0;
    }
    .AlertCont{
      transform: translateX(-50%) translateY(-50%) scale(0);
      opacity: 0;
    }
  }
}
// @keyframes swpy-tipbox-fx {
// 	0% { opacity:1; transform:translateX(-50%) translateY(-50%) scale(1.5); }
// 	10% { opacity:1; transform:translateX(-50%) translateY(-50%) scale(1); }
// 	100% { opacity:1; transform:translateX(-50%) translateY(-50%) scale(1); }
// 	// 100% { opacity:0; transform:translateX(-50%) translateY(-50%) scale(1); }
// }
</style>
