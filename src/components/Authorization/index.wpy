
<template>
	<!-- <view class="AuthorizationView" catchtouchmove="{{false}}" :class="{AuthorizationShow:!!visible}"> -->
  <view class="AuthorizationView {{visible ? 'AuthorizationShow' : 'AuthorizationHide'}}" catchtouchmove="{{false}}">
     <!-- @tap.stop="closeAlert" -->
		<view class="AuthorizationtMask" catchtouchmove="{{false}}"></view>
		<view class="AuthorizationCont" style="min-width:{{contW}};min-height:{{contH}}">
				<block wx:if="{{!!ShowCloseBtn}}">
					<image class="CloseIcon" src="../../images/components/closeAlert.png"  @tap.stop="closeAlert"/>
				</block>
				<view class="author-title">{{title}}</view>
        <text class="author-text">{{content}}</text>
				<!-- <slot name="cont" wx:else>{{'登录授权后，送你5趣币 可以在商城里兑换心水的宝贝哟'}}</slot> -->
        <view class="AuthorizationGetInfoBtn">
          <image class="authorBg" src="./assert/Rectangle.png" />
      		<button class="auth" wx:if="{{buttonType}}" lang="zh-CN" open-type="getUserInfo" bindgetuserinfo="loginSuccess" @tap="closeLayer">登录授权</button>
      		<button class="auth" wx:else lang="zh-CN" open-type="openSetting" bindgetuserinfo="loginSuccess" @tap="closeLayer">获取步数</button>
        </view>
		</view>
	</view>
</template>

<script>
import wepy from 'wepy';

export default class Authorization extends wepy.component {

	data = {
    visible: false,
    buttonType:true,
    tip:'',
    CloseBtnType:false
	};
	props={
    title:{
      default:'',
      type:String
    },
    content:{
      default:`趣生活需要你授权
              才能为你提供服务哟～`,
      type:String
    },
		contW:{
			type:String,
      default:'640rpx',
      // default:'auto',
		},
		contH:{
			type:String,
      default:'416rpx',
      // default:'auto',
		},
		ShowCloseBtn:{
			type:Boolean,
			default:true
    },
    GoLogintype:{
      type:String,
      default:'0'
    }
	}
	methods = {
		closeAlert(){
			console.log(1)
      this.visible = false
      wx.showToast({title: '请进行授权登录~',icon: 'none'})
		},
		loginSuccess(e){
      wx.showLoading({
        title: '加载中',
      })
			const {detail:{errMsg,encryptedData,iv,rawData}} = e
      console.log(this,'this')
      const _this = this
			if (e.detail.errMsg === 'getUserInfo:ok') {
				this.methods.goLogin(_this.GoLogintype).then(res=>{
          wx.hideLoading()
          this.$emit('AuthorizaLogin',res)
        }).catch(err => {
          console.log(err,'err')
          if(typeof err === 'object'&&!!err.msg){
            wx.showToast({
              title: `${err.msg}`,
              duration: 1000
            })
            // _this.$invoke('toast', 'show', `${err.msg}`,'bottom')
          }
        })
			}else{
        wx.hideLoading()
        wx.showToast({
          title: `请点击授权`,
          icon: 'none',
          duration: 2000
        })
      }
		},
		goLogin(GoLogintype) {
      const _this = this;
      let p = new Promise((reslove, reject) => {
        wepy.login().then(async coderes => {
          let wxlogincode = coderes.code;
          const url = `${wepy.$instance.globalData.baseUrl}/small/quickLogin.do`;
          const data = Object.assign({}, {
            code: wxlogincode,
            loginType: 32,
            ic: wepy.$instance.globalData.ic,
            aid: wepy.$instance.globalData.aid,
            activityCode: wepy.$instance.globalData.activityCode||'',
          });
          let param = (url, data) => {
            let obj = {
              url: url,
              method: 'POST',
              data: data,
              header: {
                'Content-type': 'application/x-www-form-urlencoded',
                'cache-control': 'no-cache',
                'appName': wepy.$instance.globalData.appName,
                'appVersion': wepy.$instance.globalData.appVersion,
                'source': wepy.$instance.globalData.source,
                'appBundleID':wepy.$instance.globalData.appBundleID,
                'MINITYPE':'QUSHENGHUO' 
              }
            };
            return obj;
          };
          let { data: WxloginData } = await wepy.request(param(url, data));
          console.log(WxloginData, 'WxloginData');
          if (WxloginData.code === '0') {
            wepy.$instance.globalData.infoKey = WxloginData.data.infoKey||'';
            wepy.$instance.globalData.RequestData = WxloginData.data;
            wepy.$instance.globalData.firstFlag = WxloginData.data.firstFlag
            wepy.$instance.globalData.isLogin = true;
            if(!!WxloginData.data.source && ((WxloginData.data.source >= 2000 && WxloginData.data.source <= 4999) || WxloginData.data.source == 303 || WxloginData.data.source == 103)){
              wepy.$instance.globalData.source = WxloginData.data.source;
            }else{
              wepy.$instance.globalData.source = 2001;
            }
            console.log(wepy.$instance.globalData.isLogin, 'wepy.$instance.globalData.isLogin');
            // wepy.$instance.globalData.ic =
            wepy.setStorageSync('RequestData', WxloginData.data);

            if(GoLogintype==='1'){
              reslove(WxloginData);
            }else{
              try {
                let getRunData = await wepy.getWeRunData();
                wepy.$instance.globalData.WxRunData = getRunData;
                reslove(WxloginData);
              } catch (e) {
                _this.checkSettingStatu(_this.goLogin, 'scope.werun');
                reject(e);
              }
            }
          } else if (WxloginData.code === '9003') {
            wepy.$instance.globalData.infoKey = WxloginData.data.infoKey||'';
            const url = `${wepy.$instance.globalData.baseUrl}/small/setWXInfo.do`;
            try {
              let { code: wxlogincode } = await wepy.login();
              let { encryptedData, iv } = await wepy.getUserInfo();

              const Againdata = Object.assign({}, {
                encryptedData,
                iv,
                infoKey: WxloginData.data.infoKey,
                code: wxlogincode,
                loginType: 32
              });

              let { data: { code, msg: setWXInfoMsg } } = await wepy.request(param(url, Againdata));
              // let {data:{code,msg:setWXInfoMsg}} = await wepy.request(param)
              if (code === '0') {
                // console.log(setWXInfoData,'setWXInfoData')
                try {
                  // let getRunData = await wepy.getWeRunData();
                  // wepy.$instance.globalData.WxRunData = getRunData;

                  let { code: wxlogincode } = await wepy.login();
                  const url = `${wepy.$instance.globalData.baseUrl}/small/quickLogin.do`;
                  const data = Object.assign(Againdata, {
                    code: wxlogincode,
                    loginType: 32,
                    ic: wepy.$instance.globalData.ic,
                    type: 195481,
                    aid: wepy.$instance.globalData.aid,
                    activityCode: wepy.$instance.globalData.activityCode||'',
                  });
                  let param = (url, data) => {
                    let obj = {
                      url: url,
                      method: 'POST',
                      data: data,
                      header: {
                        'Content-type': 'application/x-www-form-urlencoded',
                        'cache-control': 'no-cache',
                        'appName': wepy.$instance.globalData.appName,
                        'appVersion': wepy.$instance.globalData.appVersion,
                        'source': wepy.$instance.globalData.source,
                        'appBundleID':wepy.$instance.globalData.appBundleID,
                        'MINITYPE':'QUSHENGHUO' 
                      }
                    };
                    return obj;
                  };
                  let { data: WxloginData } = await wepy.request(param(url, data));
                  console.log(WxloginData, 'WxloginData');
                  wepy.$instance.globalData.infoKey = WxloginData.data.infoKey;
                  if (WxloginData.code === '0') {
                    wepy.$instance.globalData.RequestData = WxloginData.data;
                    wepy.$instance.globalData.isLogin = true;
                    wepy.$instance.globalData.firstFlag = WxloginData.data.firstFlag
                    if(!!WxloginData.data.source && ((WxloginData.data.source >= 2000 && WxloginData.data.source <= 4999) || WxloginData.data.source == 303 || WxloginData.data.source == 103)){
                      wepy.$instance.globalData.source = WxloginData.data.source;
                    }else{
                      wepy.$instance.globalData.source = 2001;
                    }
                    console.log(wepy.$instance.globalData.isLogin, 'wepy.$instance.globalData.isLogin');
                    // wepy.$instance.globalData.ic =
                    wepy.setStorageSync('RequestData', WxloginData.data);

                     if(GoLogintype==='1'){
                        reslove(WxloginData);
                      }else{
                        try {
                          let getRunData = await wepy.getWeRunData();
                          wepy.$instance.globalData.WxRunData = getRunData;
                          reslove(WxloginData);
                        } catch (e) {
                          _this.checkSettingStatu(_this.goLogin, 'scope.werun');
                          reject(e);
                        }
                      }
                  }

                } catch (e) {
                  // if(GoLogintype=='1'){
                  //   reject(e);
                  // }else{
                  //   _this.checkSettingStatu(_this.goLogin, 'scope.werun');
                    reject(e);
                  // }
                }
                reslove(WxloginData);
              } else {
                wx.showToast({
                  title: setWXInfoMsg,
                  icon: 'none',
                  duration: 1500
                });
              }

            } catch (e) {
              reject(e);
              // _this.checkSettingStatu(_this.goLogin,'scope.userInfo');
            }
          } else {
            reject(WxloginData);
          }
          // console.log(WxloginData)
        }).catch(err => {
          reject(err);
          console.log(err, 'err');
        });
      });
      return p;
    },

    isEmptyObject(e) {
      //对象是否为空；判断是否是第一次授权，非第一次授权且授权失败则进行提醒
      let t;
      for (t in e)
        return !1;
      return !0;
    },

    checkSettingStatu(cb, auth) {
      //授权处理
      console.log(auth, 'auth');
      let authData = auth || 'scope.werun';
      let _this = this;
      // 判断是否是第一次授权，非第一次授权且授权失败则进行提醒
      wx.getSetting({
        success: function success(res) {
          let authSetting = res.authSetting;
          console.log(authSetting, 'authSetting');
          if (_this.isEmptyObject(authSetting)) {
            console.log('首次授权');
          } else {
            console.log('不是第一次授权', authSetting);
            // 没有授权的提醒 scope.werun
            // let getSanMu = authData.length>1?(authSetting[authData[0]]===false||authSetting[authData[1]]===false):authSetting['scope.werun'] === false
            if (authSetting[authData] === false || !authSetting[authData]) {
              wx.showModal({
                title: '用户未授权',
                content: `如需正常使用此小程序功能，请您按确定并在设置页面授权${authData === 'scope.werun' ? '用户步数' : '用户信息'}`,
                showCancel: false,
                success: function(res) {
                  // 此处为了用于 Android 系统区分点击蒙层关闭还是点击取消按钮关闭省去了res.confirm，res.cancel判断
                  // 点击蒙层同样触发开启设置
                  wx.openSetting({
                    success: function success(res) {
                      if (res.authSetting[authData] === false || !authSetting[authData]) {
                        _this.checkSettingStatu(cb, auth);
                      } else {
                        _this.goLogin();
                      }
                    }
                  });
                }
              });
            }
          }
        }
      });
    },
	}
	computed = {

	};
	watch = {

	}
	show(callback,autoCloseType) {
		// if (!text) {
		// 	return;
		// }

		this.hide();

		setTimeout(() => {
			this.visible = true;
			// this.tip = text;
			// console.log(callback,'callback')
			this.$apply();
		}, 20);

		if (this.timer) {
			clearTimeout(this.timer);
			this.timer = null;
		}
		// console.log(autoCloseType,'autoCloseType')
		if(!autoCloseType) return ;
		this.timer = setTimeout(() => this.hide(), 2000);
	}

	hide() {
		this.visible = false;
		this.tip = '';
		this.$apply();
  }
  onLoad(){
    // console.log(this.props,'Alert中的this.props')
  }
}
</script>

<style lang="less">
.AuthorizationView{
	// display: none;
	// pointer-events: none;
	height:100%;
	width: 100%;
	position: fixed;
	top:50%;
  left:50%;
  margin: auto;
  transform: translateX(-50%) translateY(-50%);
  // z-index: 999;
  z-index: -1;
  // animation: swpy-tipbox-fx 2s ease-in-out;
	.AuthorizationtMask{
		position: absolute;
		opacity: 0;
		top:0;
		left:0;
		z-index: 1000;
		background: #1B1F2E;
		height:100%;
		width: 100%;
	}
	.AuthorizationCont{
		position: absolute;
		// padding:70rpx 44rpx;
    left: 50%;
    top: 50%;
		margin: auto;
    word-break: break-all;
    transition: all .3s cubic-bezier(0, 1.19, 0.64, 1.04);
    transform: translateX(-50%) translateY(-50%) scale(0);
    // animation: swpy-tipbox-fx .5s ease-out;
		// width: 496rpx;
		min-height: 200rpx;
    z-index: 1001;
    opacity: 0;
		background: #FFFFFF;
    border-radius: 6rpx;
    flex-direction:column;
		display: flex;
    justify-content: center;
    align-items: center;
    align-content:space-between;
    .author-title{
      width:200rpx;
      height:56rpx;
      font-size:40rpx;
      font-weight:600;
      color:rgba(68,62,111,1);
      text-align: center;
      line-height:56rpx;
    }
    .AuthorizationGetInfoBtn{
      position:relative;
      image.authorBg{
        width:100%;
        height:100%;
      }
      .auth{
        position:absolute;
        display:flex;
        justify-content: center;
        align-items: center;
        width:100%;
        height:100%;
        background:rgba(0,0,0,0);
        font-size:34rpx;
        font-weight:400;
        color:rgba(255,255,255,1);
        border:0;
        top:0;
        left:0;
        &::after{ border: none; }
      }
      width:266rpx;
      height:72rpx;
    }
		.author-text{
      // margin:50rpx auto;
      margin:36rpx 0 50rpx 0;
      width:524rpx;
      text-align:center;
      height:99rpx;
      font-size:36rpx;
      font-weight:400;
      color:rgba(68,62,111,1);
      line-height:50rpx;
		}
		.CloseIcon{
			width: 47rpx;
			height: 47rpx;
			position: absolute;
			z-index: 1001;
			right: 25rpx;
			top: 25rpx;
		}
	}
	&.AuthorizationShow{
    // display: block;
    z-index: 999;
    .AuthorizationtMask{
      opacity: 0.4;
    }
    .AuthorizationCont{
      transform: translateX(-50%) translateY(-50%) scale(1);
      opacity: 1;
    }
  }
  &.AuthorizationHide{
    z-index: -1;
    .AuthorizationMask{
      opacity: 0;
    }
    .AuthorizationCont{
      transform: translateX(-50%) translateY(-50%) scale(0);
      opacity: 0;
    }
  }
}
// @keyframes swpy-tipbox-fx {
// 	0% { opacity:1; transform:translateX(-50%) translateY(-50%) scale(1.5); }
// 	10% { opacity:1; transform:translateX(-50%) translateY(-50%) scale(1); }
// 	100% { opacity:1; transform:translateX(-50%) translateY(-50%) scale(1); }
// 	// 100% { opacity:0; transform:translateX(-50%) translateY(-50%) scale(1); }
// }
</style>
